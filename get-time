#!/usr/bin/env node

const { promises: fs, constants: fsConstants } = require("fs");
const path = require("path");
const dateFns = require("date-fns");
const ms = require("ms");

// How many sections to break each hour into. Default is 4 for 15
// minutes (i.e. 60 / 15).
const GRANULARITY = 4;

function abort(message) {
  console.error(message);
  process.exit(1);
}

function template(startTime, endTime) {
  if (startTime < 0 || startTime > 23 || endTime > 23) {
    throw new RangeError("start and end times must be a valid hour number");
  }

  if (endTime <= startTime) {
    throw new RangeError("end time must be greater than start time");
  }

  const timeSection = "-".repeat(GRANULARITY);

  let templateArray = [
    ["| Name"], // header / hour titles
    [`| ${timeSection}`], // header separators
    [`| ${"-".padEnd(GRANULARITY)}`], // time entries
  ];

  for (let hour = startTime; hour <= endTime; hour++) {
    templateArray[0].push(hour.toString().padEnd(GRANULARITY));
    templateArray[1].push(timeSection);
    templateArray[2].push(timeSection);
  }

  // add ending markers to each line
  templateArray.map((l) => l.push(""));

  // convert to a string
  return templateArray.map((x) => x.join(" | ")).join("\n");
}

function configPath(filePath) {
  const configDirectory = "/Users/bknight/Desktop/scratchpad/times-txt";
  return path.resolve(configDirectory, filePath);
}

async function createNewTemplate(startTime, endTime) {
  const dest = configPath(dateToDocumentName(Date.now()));

  try {
    await fs.writeFile(dest, template(startTime, endTime), { flag: "wx" });
  } catch (error) {
    abort(error.message);
  }
}

function dateToDocumentName(date) {
  const today = dateFns.format(date, "yyyy-MM-dd");
  return `${today}.md`;
}

function getHours(doc) {
  const entryCount = doc
    .match(/ (?<entries>[-x]{4}) /gi)
    .join("")
    .replace(/[ -]/g, "").length;

  return entryCount / 4;
}

function getBreakdown(doc) {
  const timeEntries = doc
    .split("\n")
    .slice(2)
    .filter((line) => line[0] === "|")
    .slice(0, -1)
    .map((line) => line.split("|").filter(Boolean))
    .map(([title, ...times]) => [
      title.replace(/\\*/g, "").trim(),
      getHours(times.join()),
    ])
    // Move "spread" time to bottom
    .sort((a, b) => (a[0] === "spread" ? 1 : b[0] === "spread" ? -1 : 0));

  const longestTitle = timeEntries.reduce(
    (longest, [title]) => Math.max(longest, title.length),
    0
  );

  const formatTitle = (str) => str.padEnd(longestTitle + 2, ".");
  const formatTime = (num) => num.toFixed(2);
  const formatEntry = ([title, time]) =>
    `- ${formatTitle(title)}${formatTime(time)}\n`;

  return timeEntries.reduce(
    (output, timeEntry) => output.concat(formatEntry(timeEntry)),
    "\n"
  );
}

function parseArguments() {
  const defaultArguments = {
    endTime: 15,
    filename: dateToDocumentName(Date.now()),
    shouldCreateNew: false,
    showHelp: false,
    showVersion: false,
    startTime: 7,
  };

  const parsedArguments = { ...defaultArguments };

  const givenArguments = process.argv.slice(2);

  while (givenArguments.length) {
    const command = givenArguments.shift();

    if (command === "--help" || command == "-h") {
      parsedArguments.showHelp = true;
    } else if (command === "--version" || command == "-V") {
      parsedArguments.showVersion = true;
    } else if (command === "new") {
      parsedArguments.shouldCreateNew = true;
    } else if (command === "today") {
      parsedArguments.filename = dateToDocumentName(Date.now());
    } else if (command === "--start" || command === "-s") {
      parsedArguments.startTime = parseInt(givenArguments.shift());
    } else if (command === "--end" || command === "-e") {
      parsedArguments.endTime = parseInt(givenArguments.shift());
    } else if (isFinite(Number(command))) {
      parsedArguments.filename = dateToDocumentName(
        dateFns.addDays(Date.now(), Number(command))
      );
    } else if (/\.md$/.test(command)) {
      parsedArguments.filename = command;
    } else if (isFinite(dateFns.parseISO(command).getTime())) {
      parsedArguments.filename = `${command}.md`;
    } else if (new RegExp(command).test("yesterday")) {
      parsedArguments.filename = dateToDocumentName(
        dateFns.subDays(Date.now(), 1)
      );
    } else {
      abort(`unknown argument: ${command}`);
    }
  }

  return parsedArguments;
}

/**
 * @param {Date} date
 * @param {number} nearestMs
 * @param {(x: number) => number} roundFn
 * @return {Date}
 */
function roundDate(date, nearestMs, roundFn = Math.ceil) {
  return new Date(roundFn(date.getTime() / nearestMs) * nearestMs);
}

async function getTimeSummary(filename) {
  const filePath = configPath(filename);
  let contents;

  try {
    contents = await fs.readFile(filePath, { encoding: "utf8" });
  } catch (error) {
    abort(error.message);
  }

  const hours = getHours(contents);
  const output = [];

  output.push(`Current:     ${hours} hr`);

  if (hours < 8) {
    const remainingHours = 8 - hours;
    const endTimestamp = dateFns.addMinutes(
      Date.now(),
      remainingHours * 60 // HACK: dateFns.addHours seems to only apply whole hours, not minutes
    );
    const endTime = roundDate(
      new Date(endTimestamp),
      ms("15min")
    ).toLocaleTimeString();

    output.push(`Remaining:   ${remainingHours} hr - ${endTime}`);
  }

  output.push(getBreakdown(contents));

  return output.join("\n");
}

function showHelp() {
  console.log(
    `
Prints timesheet hours

Usage:
  get-time [options] [command]

Options:
  -h, --help     output usage information and exit
  -V, --version  output the version number and exit

Commands:
  new       creates a new timesheet for the current day; no options
  today     shows time for today
  [number]  shows time for the day {n} days from now (positive or negative)`.trim()
  );
}

async function main() {
  const args = parseArguments();

  if (args.showHelp) {
    showHelp();
    return;
  }

  if (args.showVersion) {
    const { name, version } = require("./package.json");
    console.log(`${name}@${version}`);
    return;
  }

  if (args.shouldCreateNew) {
    return await createNewTemplate(args.startTime, args.endTime);
  }

  if (args.filename !== null) {
    console.log(await getTimeSummary(args.filename));
  }
}

main();
